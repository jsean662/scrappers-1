# -*- coding: utf-8 -*-
import scrapy
from scrapy.selector import Selector
from scrapy.http import Request
import re
from datetime import datetime as dt
from dateutil.relativedelta import relativedelta
from ..items import PropertywalakolkataSaleItem


class KolkatasalePropertywalaSpider(scrapy.Spider):
    name = "propertywalaSaleKolkata"
    allowed_domains = ["propertywala.com"]
    start_urls = (
        'https://www.propertywala.com/properties/type-residential_apartment_flat/for-sale/location-kolkata_west_bengal?page=%s' % page for page in range(1, 41)
    )
    custom_settings = {
        'DEPTH_LIMIT': 10000,
        'DOWNLOAD_DELAY': 1
    }
    item = PropertywalakolkataSaleItem()

    def parse(self, response):
        record = Selector(response)
        data = record.xpath('//li[@class="posted"]')

        for i in data:
            ids = i.xpath('text()').extract_first().strip().encode('ascii', 'ignore').decode('ascii').replace('ID: ', '').replace('  Posted:', '')
            d = response.xpath("//*[contains(@id,'" + ids + "')]/div/ul/li[3]/span/@title").extract_first()
            name_lister = response.xpath("//*[contains(@id,'" + ids + "')]/div/ul/li[3]/span/text()").extract_first()
            if d is None:
                d = response.xpath("//*[contains(@id,'" + ids + "')]/div/ul/li[3]/a/@title").extract_first()
                name_lister = response.xpath("//*[contains(@id,'" + ids + "')]/div/ul/li[3]/a/text()").extract_first()

            if 'Owner' in d:
                d = 'Owner'
            elif 'Builder' in d:
                d = 'Builder'
            elif 'Broker' in d:
                d = 'Agent'
            else:
                d = 'Propertywala User'

            url = 'https://www.propertywala.com/' + i.xpath('text()').extract_first().strip().encode('ascii', 'ignore').decode('ascii').replace('ID: ', '').replace('  Posted:', '')
            request = Request(url, callback=self.parse1, dont_filter=True)
            request.meta['agent'] = d
            request.meta['name'] = name_lister
            yield request

    def parse1(self, response):
        record = Selector(response)

        checkprop = response.xpath('//h2[@id="AutoGeneratedTitle"]/text()').extract_first()
        if 'plot' in checkprop.lower() or 'land' in checkprop.lower():
            pass
        else:
            self.item['Selling_price'] = '0'
            self.item['Possession'] = '0'
            self.item['Status'] = 'None'
            self.item['carpet_area'] = '0'
            self.item['management_by_landlord'] = 'None'
            self.item['areacode'] = 'None'
            self.item['mobile_lister'] = 'None'
            self.item['google_place_id'] = 'None'
            self.item['Launch_date'] = '0'
            self.item['age'] = 'None'
            self.item['address'] = 'None'
            self.item['price_on_req'] = 'false'
            self.item['Details'] = 'None'
            self.item['Monthly_Rent'] = '0'
            self.item['sublocality'] = 'None'
            self.item['price_per_sqft'] = '0'
            self.item['city'] = 'Kolkata'
            self.item['platform'] = 'Propertywala'

            self.item['listing_by'] = response.meta['agent']
            self.item['name_lister'] = response.meta['name']

            self.item['lat'] = response.xpath('//meta[@property="og:latitude"]/@content').extract_first()

            self.item['longt'] = response.xpath('//meta[@property="og:longitude"]/@content').extract_first()

            self.item['data_id'] = response.url.split('/')[-1]

            dat = response.xpath('//li[@class="noPrint"]/time/@datetime').extract_first().replace('Z', '')

            self.item['listing_date'] = dt.strftime(dt.strptime(dat, '%Y-%m-%d %H:%M:%S'), '%m/%d/%Y %H:%M:%S')

            self.item['updated_date'] = self.item['listing_date']

            conf = response.xpath('//h2[@id="AutoGeneratedTitle"]/text()').extract_first()

            bed = re.findall('[0-9]', conf)
            if bed:
                self.item['config_type'] = bed[0] + 'BHK'
            if not bed:
                self.item['config_type'] = 'None'

            try:
                loc = response.xpath('//div[@id="PropertyDetails"]/section/header/h4/text()').extract_first().strip().split(',')
                self.item['locality'] = loc[len(loc) - 2].strip()

                build = response.xpath('//div[@id="PropertyDetails"]/section/header/h3/text()').extract_first().strip()
                build1 = response.xpath('//div[@id="PropertyDetails"]/section/header/h4/text()').extract_first().strip()
                address = response.xpath('//div[@id="PropertyDetails"]/section/header/h4/text()').extract_first().strip().split(',')
                self.item['address'] = address
            except:
                self.item['address'] = 'Kolkata'
                self.item['locality'] = 'None'

            try:
                buildname = response.xpath('//*[@id="PropertySummary"]/header/h4').extract_first().split(',')[0]  # re.findall('for rent in (.*)?,', conf)
            except:
                self.item['Building_name'] = 'None'

            if 'House' in conf:
                self.item['property_type'] = 'House'
                self.item['Building_name'] = 'None'
            else:
                self.item['property_type'] = 'Residential'
                if buildname is not None:
                    self.item['Building_name'] = buildname
                    if self.item['locality'] in self.item['Building_name']:
                        self.item['Building_name'] = ''.join(re.findall(' in (.*)', build))
                        if ' at ' in self.item['Building_name']:
                            self.item['Building_name'] = self.item['Building_name'].split(' at ')[0]
                        elif ',' in self.item['Building_name']:
                            self.item['Building_name'] = self.item['Building_name'].split(',')[0]
                        if self.item['Building_name'] == '':
                            self.item['Building_name'] = ''.join(re.findall(' at (.*)', build))
                            if self.item['Building_name'] == '':
                                self.item['Building_name'] = ''.join(build1.split(',')[:1]).replace(self.item['locality'], '')
                    if (self.item['city'] in self.item['Building_name']) or (self.item['locality'] in self.item['Building_name']) or (self.item['Building_name'] in self.item['locality']) or (' for ' in self.item['Building_name']):
                        self.item['Building_name'] = ''.join(build1.split(',')[:2]).replace(self.item['locality'], '')
                    if (self.item['Building_name'] == ' ') or (self.item['Building_name'] == ''):
                        self.item['Building_name'] = 'None'
                    try:
                        re.sub('for rent', '', buildname, flags=re.IGNORECASE)
                        re.sub('for sale', '', buildname, flags=re.IGNORECASE)
                        re.sub(' in ', '', buildname, flags=re.IGNORECASE)
                        re.sub('for boys', '', buildname, flags=re.IGNORECASE)
                        re.sub('for girls', '', buildname, flags=re.IGNORECASE)
                        re.sub('bhk', '', buildname, flags=re.IGNORECASE)
                    except:
                        pass
                else:
                    self.item['Building_name'] = 'None'

            value = response.xpath('//ul[@id="PropertyAttributes"]/li/span/text()').extract()
            if ' rent ' in conf:
                self.item['txn_type'] = 'Rent'
            if ' sale ' in conf:
                try:
                    self.item['txn_type'] = [s.split(' ')[0] for s in value if ' Property' in s][0]
                except:
                    self.item['txn_type'] = 'Sale'
                if 'ew' in self.item['txn_type']:
                    self.item['txn_type'] = 'Sale'

            try:
                price = response.xpath('//div[@id="PropertyPrice"]/text()').extract_first()[-1].strip()
                if ',' in price:
                    price = price.replace(',', '')
                if 'ale' in self.item['txn_type']:
                    if 'la' in price:
                        price = price.split(' la')[0]
                        if (not '-' in price):
                            self.item['Selling_price'] = str(float(price.split(' ')[0]) * 100000)
                        elif ('-' in price):
                            self.item['Selling_price'] = str(float(price.split('-')[-1]) * 100000)
                    if 'crore' in price.lower():
                        price = price.split(' crore')[0]
                        if (not '-' in price):
                            self.item['Selling_price'] = str(float(price.split(' ')[0]) * 10000000)
                        elif ('-' in price):
                            self.item['Selling_price'] = str(float(price.split('-')[-1]) * 10000000)
                if 'Rent' in self.item['txn_type']:
                    if 'la' in price:
                        price = price.split(' lakh')[0]
                        if (not '-' in price):
                            self.item['Monthly_Rent'] = str(float(price.split('-')[0]) * 100000)
                        elif ('-' in price):
                            self.item['Monthly_Rent'] = str(float(price.split('-')[-1]) * 100000)
                    if 'crore' in price:
                        price = price.split(' crore')[0]
                        if (not '-' in price):
                            self.item['Monthly_Rent'] = str(float(price.split('-')[0]) * 10000000)
                        elif ('-' in price):
                            self.item['Monthly_Rent'] = str(float(price.split('-')[-1]) * 10000000)
            except:
                pass
            try:
                price_square = response.xpath("//ul[@id='PropertyAttributes']/li[contains(text(),'Rate')]/span/text()").extract_first().replace(',','')
                self.item['price_per_sqft'] = price_square
            except:
                self.item['price_per_sqft'] = 0

            try:
                poss = [pos for pos in value if ('Immediate' in pos) or (('Within' in pos) and ('Year' in pos)) or (('Within' in pos) and ('Month' in pos))][0]
            except:
                poss = 'None'
            if 'Immediate' in poss:
                self.item['Possession'] = dt.today().strftime('%m/%d/%Y %H:%M:%S')
                self.item['Status'] = 'Ready to move'
            if (('Within' in poss) and ('Year' in poss)):
                poss1 = int(poss.replace('Within ', '').split(' Year')[0])
                self.item['Possession'] = (dt.today() + relativedelta(years=poss1)).strftime('%m/%d/%Y %H:%M:%S')
                self.item['Status'] = 'Under Construction'
            if (('Within' in poss) and ('Month' in poss)):
                poss1 = int(poss.replace('Within ', '').split(' Month')[0])
                self.item['Possession'] = (dt.today() + relativedelta(months=poss1)).strftime('%m/%d/%Y %H:%M:%S')
                self.item['Status'] = 'Under Construction'

            try:
                self.item['Bua_sqft'] = response.xpath('//span[@class="areaUnit downArrow"]/text()').extract_first(default='0').split(' ')[0]
            except:
                self.item['Bua_sqft'] = '0'

            if 'esale' in self.item['txn_type']:
                try:
                    self.item['age'] = [age for age in value if 'Years' in age][0]
                except:
                    self.item['age'] = '0'
                if not self.item['age']:
                    self.item['age'] = '0'

            try:
                if str(self.item['Building_name']).isdigit():
                    self.item['Building_name'] = 'None'

                if len(self.item['Building_name']) < 3 or len(self.item['Building_name']) > 35:
                    self.item['Building_name'] = 'None'
            except:
                pass

            if (((not self.item['Monthly_Rent'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['Building_name'] == 'None') and (not self.item['lat'] == '0')) or ((not self.item['Selling_price'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['Building_name'] == 'None') and (not self.item['lat'] == '0')) or ((not self.item['price_per_sqft'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['Building_name'] == 'None') and (not self.item['lat'] == '0'))):
                self.item['quality4'] = 1
            elif (((not self.item['price_per_sqft'] == '0') and (not self.item['Building_name'] == 'None') and (not self.item['lat'] == '0')) or ((not self.item['Selling_price'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['lat'] == '0')) or ((not self.item['Monthly_Rent'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['lat'] == '0')) or ((not self.item['Selling_price'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['Building_name'] == 'None')) or ((not self.item['Monthly_Rent'] == '0') and (not self.item['Bua_sqft'] == '0') and (not self.item['Building_name'] == 'None'))):
                self.item['quality4'] = 0.5
            else:
                self.item['quality4'] = 0
            if ((not self.item['Building_name'] == 'None') and (not self.item['listing_date'] == '0') and (not self.item['txn_type'] == 'None') and (not self.item['property_type'] == 'None') and ((not self.item['Selling_price'] == '0') or (not self.item['Monthly_Rent'] == '0'))):
                self.item['quality1'] = 1
            else:
                self.item['quality1'] = 0

            if ((not self.item['Launch_date'] == '0') or (not self.item['Possession'] == '0')):
                self.item['quality2'] = 1
            else:
                self.item['quality2'] = 0

            if ((not self.item['mobile_lister'] == 'None') or (not self.item['listing_by'] == 'None') or (not self.item['name_lister'] == 'None')):
                self.item['quality3'] = 1
            else:
                self.item['quality3'] = 0

            yield self.item

